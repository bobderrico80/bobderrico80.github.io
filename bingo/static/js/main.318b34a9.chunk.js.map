{"version":3,"sources":["modules/utils.ts","components/Square.tsx","components/Column.tsx","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getColumnNumbers","startingNumber","endingNumber","columnSize","Error","min","max","columnNumbers","Set","size","nextNumber","Math","ceil","floor","random","add","Array","from","values","Square","squareDefinition","index","onChange","group","squareNumber","marked","id","freeSpace","squareText","String","className","type","checked","aria-label","event","currentTarget","aria-hidden","htmlFor","classnames","Column","squareDefinitions","startingIndex","onSquareChange","map","key","COLUMN_GROUPS","Board","groupedSquareDefinitions","squaresPerGroup","reduce","groups","length","push","groupSquareDefinitions","getNewBoard","bColumn","iColumn","nColumn","gColumn","oColumn","splice","getStandardBoardNumbers","columnNumber","App","useState","setSquareDefinitions","useEffect","encodedState","URLSearchParams","window","location","search","get","decodedBoard","encoded","matchedString","match","RegExp","possibleMatches","endsWith","parseInt","replace","decodeBoard","indexToUpdate","value","currentSquareDefinitions","onClick","confirm","previousSquareDefinitions","origin","pathname","url","encodeBoard","tempInput","document","createElement","body","appendChild","select","execCommand","removeChild","alert","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.318b34a9.chunk.js","sourcesContent":["import { SquareDefinition } from '../components/Square';\n\nconst getRandomInt = (min: number, max: number) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport const getColumnNumbers = (\n  startingNumber: number,\n  endingNumber: number,\n  columnSize: number\n): number[] => {\n  if (endingNumber - startingNumber + 1 < columnSize) {\n    throw new Error('Range is too small for column size');\n  }\n\n  const columnNumbers = new Set<number>();\n\n  while (columnNumbers.size < columnSize) {\n    const nextNumber = getRandomInt(startingNumber, endingNumber + 1);\n    columnNumbers.add(nextNumber);\n  }\n\n  return Array.from(columnNumbers.values());\n};\n\nexport const getStandardBoardNumbers = (): number[] => {\n  const bColumn = getColumnNumbers(1, 15, 5);\n  const iColumn = getColumnNumbers(16, 30, 5);\n  const nColumn = getColumnNumbers(31, 45, 4);\n  const gColumn = getColumnNumbers(46, 60, 5);\n  const oColumn = getColumnNumbers(61, 75, 5);\n\n  // handle free space with a '0'\n  nColumn.splice(2, 0, 0);\n\n  return [...bColumn, ...iColumn, ...nColumn, ...gColumn, ...oColumn];\n};\n\nexport const getSquareDefinitions = (\n  columnNumbers: number[]\n): SquareDefinition[] => {\n  return columnNumbers.map((columnNumber) => {\n    return {\n      squareNumber: columnNumber,\n      marked: false,\n    };\n  });\n};\n\nexport const groupSquareDefinitions = (\n  squareDefinitions: SquareDefinition[],\n  squaresPerGroup: number\n) => {\n  return squareDefinitions.reduce(\n    (groups: SquareDefinition[][], squareDefinition, index) => {\n      if (index % squaresPerGroup === 0) {\n        return [...groups, [squareDefinition]];\n      }\n\n      groups[groups.length - 1].push(squareDefinition);\n\n      return groups;\n    },\n    []\n  );\n};\n\nexport const encodeBoard = (squareDefinitions: SquareDefinition[]): string => {\n  return squareDefinitions.reduce((encoded, squareDefinition) => {\n    return `${encoded}${squareDefinition.squareNumber}${\n      squareDefinition.marked ? 'x' : 'o'\n    }`;\n  }, '');\n};\n\nexport const decodeBoard = (encoded: string): SquareDefinition[] => {\n  const SQUARE_REGEX = '\\\\d+[xo]';\n  const matchedString = encoded.match(new RegExp(`(${SQUARE_REGEX}){1,}`, 'g'));\n\n  if (!matchedString || matchedString[0].length !== encoded.length) {\n    return [];\n  }\n\n  const possibleMatches = encoded.match(new RegExp(SQUARE_REGEX, 'g'));\n\n  if (!possibleMatches) {\n    return [];\n  }\n\n  return possibleMatches.map((match) => {\n    const marked = match.endsWith('x');\n    const squareNumber = parseInt(match.replace(/[xo]/, ''), 10);\n\n    return { marked, squareNumber };\n  });\n};\n","import React, { ChangeEvent } from 'react';\nimport classnames from 'classnames';\nimport './Square.css';\n\nexport interface SquareDefinition {\n  squareNumber: number;\n  marked: boolean;\n}\n\nexport interface SquareProps {\n  squareDefinition: SquareDefinition;\n  group: string;\n  index: number;\n  onChange: (index: number, value: boolean) => void;\n}\n\nconst Square = ({ squareDefinition, index, onChange, group }: SquareProps) => {\n  const { squareNumber, marked } = squareDefinition;\n  const id = `${group}${squareNumber}`;\n  const freeSpace = squareNumber === 0;\n  const squareText = freeSpace ? 'FREE' : String(squareNumber);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange(index, event.currentTarget.checked);\n  };\n\n  return (\n    <div className=\"c-bc-square\">\n      <input\n        id={id}\n        className=\"c-bc-square__checkbox\"\n        type=\"checkbox\"\n        checked={marked}\n        aria-label={id}\n        onChange={handleChange}\n      />\n      {marked && (\n        <span className=\"c-bc-square__marker\" aria-hidden={true}></span>\n      )}\n      <label htmlFor={id} className=\"c-bc-square__label\">\n        <span\n          className={classnames('c-bc-square__text', {\n            'c-bc-square__text--free': freeSpace,\n          })}\n        >\n          {squareText}\n        </span>\n      </label>\n    </div>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport Square, { SquareDefinition } from './Square';\nimport './Column.css';\n\nexport interface ColumnProps {\n  squareDefinitions: SquareDefinition[];\n  group: string;\n  startingIndex: number;\n  onSquareChange: (index: number, value: boolean) => void;\n}\n\nconst Column = ({\n  squareDefinitions,\n  group,\n  startingIndex,\n  onSquareChange,\n}: ColumnProps) => {\n  return (\n    <fieldset className=\"c-bc-column\">\n      <legend className=\"c-bc-column__heading\">\n        <span className=\"c-bc-column__heading-text\">{group}</span>\n      </legend>\n      {squareDefinitions.map((squareDefinition, index) => {\n        return (\n          <Square\n            squareDefinition={squareDefinition}\n            index={startingIndex + index}\n            group={group}\n            onChange={onSquareChange}\n            key={`${group}${squareDefinition.squareNumber}`}\n          />\n        );\n      })}\n    </fieldset>\n  );\n};\n\nexport default Column;\n","import React from 'react';\nimport { SquareDefinition } from './Square';\nimport Column from './Column';\nimport './Board.css';\nimport { groupSquareDefinitions } from '../modules/utils';\n\nconst SQUARES_PER_COLUMN = 5;\nconst COLUMN_GROUPS = ['B', 'I', 'N', 'G', 'O'];\n\nexport interface BoardProps {\n  squareDefinitions: SquareDefinition[];\n  onSquareChange: (index: number, value: boolean) => void;\n}\n\nconst Board = ({ squareDefinitions, onSquareChange }: BoardProps) => {\n  const groupedSquareDefinitions = groupSquareDefinitions(\n    squareDefinitions,\n    SQUARES_PER_COLUMN\n  );\n\n  return (\n    <form className=\"c-bc-board\">\n      {groupedSquareDefinitions.map((squareDefinitions, index) => {\n        return (\n          <Column\n            squareDefinitions={squareDefinitions}\n            group={COLUMN_GROUPS[index]}\n            startingIndex={index * SQUARES_PER_COLUMN}\n            onSquareChange={onSquareChange}\n            key={COLUMN_GROUPS[index]}\n          />\n        );\n      })}\n    </form>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from 'react';\nimport {\n  getSquareDefinitions,\n  getStandardBoardNumbers,\n  encodeBoard,\n  decodeBoard,\n} from './modules/utils';\nimport './App.css';\nimport Board from './components/Board';\n\nconst getNewBoard = () => {\n  return getSquareDefinitions(getStandardBoardNumbers());\n};\n\nconst App = () => {\n  const [squareDefinitions, setSquareDefinitions] = useState(getNewBoard());\n\n  useEffect(() => {\n    const encodedState = new URLSearchParams(window.location.search).get('s');\n\n    if (encodedState) {\n      const decodedBoard = decodeBoard(encodedState);\n\n      if (decodedBoard.length === 25) {\n        setSquareDefinitions(decodedBoard);\n      }\n    }\n  }, []);\n\n  const handleSquareChange = (indexToUpdate: number, value: boolean) => {\n    setSquareDefinitions((currentSquareDefinitions) => {\n      return currentSquareDefinitions.map((squareDefinition, index) => {\n        if (index === indexToUpdate) {\n          return {\n            ...squareDefinition,\n            marked: value,\n          };\n        }\n\n        return squareDefinition;\n      });\n    });\n  };\n\n  const handleClearBoard = () => {\n    if (window.confirm('Clear all markings from your board?')) {\n      setSquareDefinitions((previousSquareDefinitions) => {\n        return previousSquareDefinitions.map((squareDefinition) => {\n          return {\n            ...squareDefinition,\n            marked: false,\n          };\n        });\n      });\n    }\n  };\n\n  const handleNewBoard = () => {\n    if (\n      window.confirm(\n        'Are you sure you want a new board? You will lose your old board!'\n      )\n    ) {\n      setSquareDefinitions(getNewBoard());\n    }\n  };\n\n  const handleBoardCopy = () => {\n    const { origin, pathname } = window.location;\n    const url = `${origin}${pathname}?s=${encodeBoard(squareDefinitions)}`;\n\n    const tempInput = document.createElement('input');\n    tempInput.value = url;\n    document.body.appendChild(tempInput);\n    tempInput.select();\n    document.execCommand('copy');\n    document.body.removeChild(tempInput);\n    alert('Board link copied to clipboard!');\n  };\n\n  return (\n    <div className=\"c-bc-app\">\n      <Board\n        squareDefinitions={squareDefinitions}\n        onSquareChange={handleSquareChange}\n      />\n      <button className=\"c-bc-app__button\" onClick={handleClearBoard}>\n        Clear Board\n      </button>\n      <button className=\"c-bc-app__button\" onClick={handleNewBoard}>\n        New Board\n      </button>\n      <button className=\"c-bc-app__button\" onClick={handleBoardCopy}>\n        Copy Board Link\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}